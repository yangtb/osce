<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.4.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.osce</groupId>
    <artifactId>osce-service</artifactId>
    <version>1.0.0</version>
    <name>osce-service</name>
    <description>Osce system for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <osce.version>1.0.0</osce.version>

        <zookeeper.version>3.4.14</zookeeper.version>
        <zkclient.version>0.11</zkclient.version>
        <dubbo.version>2.7.1</dubbo.version>
    </properties>

    <dependencies>

        <!-- 项目内jar -->
        <dependency>
            <groupId>com.osce</groupId>
            <artifactId>osce-api</artifactId>
            <version>${osce.version}</version>
        </dependency>
        <dependency>
            <groupId>com.osce</groupId>
            <artifactId>osce-orm</artifactId>
            <version>${osce.version}</version>
        </dependency>
        <dependency>
            <groupId>com.osce</groupId>
            <artifactId>osce-service</artifactId>
            <version>${osce.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo</artifactId>
            <version>${dubbo.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
            <version>${dubbo.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-recipes</artifactId>
            <version>4.2.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
            <version>4.2.0</version>
        </dependency>

        <dependency>
            <groupId>com.101tec</groupId>
            <artifactId>zkclient</artifactId>
            <version>${zkclient.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
            </exclusions>
            <version>${zookeeper.version}</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

    </dependencies>

    <profiles>
        <profile><!-- 默认本地开发环境，支持开发者本地代码开发工具运行，本地打包命令： mvn clean install -e -Dmaven.test.skip -->
            <id>development</id>
            <properties>
                <env>dev</env>
                <resource.target.path>classes</resource.target.path>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile><!-- 测试环境，打包命令： mvn clean install -e -P test -Dmaven.test.skip -->
            <id>test</id>
            <properties>
                <env>test</env>
                <resource.target.path>${project.artifactId}/resources</resource.target.path>
            </properties>
        </profile>
        <profile><!-- 预发布环境，打包命令： mvn clean install -e -P uat -Dmaven.test.skip -->
            <id>uat</id>
            <properties>
                <env>uat</env>
                <resource.target.path>${project.artifactId}/resources</resource.target.path>
            </properties>
        </profile>
        <profile><!-- 生产环境， 打包命令：mvn clean install -e -P prd -Dmaven.test.skip -->
            <id>prd</id>
            <properties>
                <env>prd</env>
                <resource.target.path>${project.artifactId}/resources</resource.target.path>
            </properties>
        </profile>
    </profiles>
    <build>
        <!-- 定义工程编译打包后的名字 -->
        <finalName>${project.artifactId}</finalName>
        <filters>
            <!-- 不同环境下的属性变量定义 -->
            <filter>temp/profile/profile.${env}.properties</filter>
        </filters>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes><!-- 编译打包时，需要maven根据环境变量${env}进行属性覆盖的文件 -->
                    <include>**/*.properties</include>
                    <include>**/*.yml</include>
                    <include>**/*.xml</include>
                </includes>
                <targetPath>${project.build.directory}/${resource.target.path}</targetPath>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <!-- resources资源 根据不同环境编译 打包到target下 不同的指定路径下 -->
                <targetPath>${project.build.directory}/${resource.target.path}</targetPath>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/${project.artifactId}</outputDirectory>
                    <archive>
                        <addMavenDescriptor>false</addMavenDescriptor>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <!-- 定义可执行jar所依赖的第三方jar包的路径lib/为classpath路径 -->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!-- 定义可执行Jar的启动main函数入口类 -->
                            <mainClass>com.osce.OsceServiceBoot</mainClass>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                        <manifestEntries>
                            <!-- 新定义一个classpath路径 -->
                            <Class-Path>./resources/</Class-Path>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            <plugin><!-- 打包插件 -->
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <id>make-zip</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <descriptors><!-- 打包的规则描述文件 -->
                                <descriptor>temp/assembly/assembly.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
